{
	"info": {
		"_postman_id": "5be69cd6-bec4-4570-8ffe-ac8cb186049b",
		"name": "3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14673334"
	},
	"item": [
		{
			"name": "EX_3",
			"item": [
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"resp_data = pm.response.json();\r",
									"console.log(\"Response: \", resp_data)\r",
									"pm.environment.set(\"token\", resp_data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test1234",
									"type": "string"
								},
								{
									"key": "username",
									"value": "anvirus",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "anvirus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "test1234",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var req_data = JSON.parse(pm.request.body.raw)\r",
									"var resp_data = pm.response.json();\r",
									"console.log(req_data)\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test (\"Validating schema\", function (){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"qa_salary_after_6_months\", function () {\r",
									"    pm.expect(req_data.salary*2).to.eql(resp_data.qa_salary_after_6_months);\r",
									"});\r",
									"\r",
									"pm.test(\"qa_salary_after_12_months\", function () {\r",
									"    pm.expect(req_data.salary*2.9).to.eql(resp_data.qa_salary_after_12_months);\r",
									"});\r",
									"\r",
									"pm.test(\"u_salary_1.5_year\", function () {\r",
									"    pm.expect(req_data.salary*4).to.eql(resp_data.person.u_salary_1_5_year);\r",
									"});\r",
									"\r",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"pm.environment.set(\"u_salary_1_5_year\", resp_data.person.u_salary_1_5_year);\r",
									"\r",
									"// pm.sendRequest(environment.url + \"/get_test_user?\" + environment.u_salary_1_5_year, function (err, response) {\r",
									"//     console.log(response.json());\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\" : 26,\r\n    \"salary\" : 1000,\r\n    \"name\": \"Suleyman\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var req_data = request.data;\r",
									"var resp_data = pm.response.json();\r",
									"\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test (\"Validating schema\", function (){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"salary*2 eql with salary[1]\", function () {\r",
									"    pm.expect(+req_data.salary*2).to.eql(+resp_data.salary[1]);\r",
									"});\r",
									"\r",
									"pm.test(\"salary*3 eql with salary[2]\", function () {\r",
									"    pm.expect(+req_data.salary*3).to.eql(+resp_data.salary[2]);\r",
									"});\r",
									"\r",
									"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"salary[2] above salary[1] and [0]\", function () {\r",
									"    pm.expect(+resp_data.salary[2]).to.above(+resp_data.salary[1]) && pm.expect(+resp_data.salary[2]).to.above(+resp_data.salary[0]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "26",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Suleyman",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}//new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "/test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var req_data = request.data;\r",
									"var rest_data = pm.response.json();\r",
									"\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\" : {\r",
									"        \"age\": {\r",
									"            \"type\" : \"integer\"\r",
									"        },\r",
									"        \"daily_food\" : {\r",
									"            \"type\" : \"number\"\r",
									"        },\r",
									"        \"daily_sleep\" : {\r",
									"            \"type\" : \"number\"\r",
									"        },\r",
									"        \"name\" : {\r",
									"            \"type\" : \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"daily_food\",\r",
									"        \"daily_sleep\",\r",
									"        \"name\",\r",
									"    ]\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test (\"Validating schema\", function (){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"daily_food = weight*0.012\", function () {\r",
									"    pm.expect(+req_data.weight*0.012).to.eql(rest_data.daily_food);\r",
									"});\r",
									"\r",
									"pm.test(\"daily_sleep = weight*2.5\", function () {\r",
									"    pm.expect(+req_data.weight*2.5).to.eql(rest_data.daily_sleep);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "26",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "5",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Suleyman",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"req_data = request.data;\r",
									"resp_data = pm.response.json();\r",
									"\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test (\"Validating schema\", function (){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.environment.set(\"name\", req_data.name);\r",
									"pm.test(\"Name in response is eql name in env\", function () {\r",
									"    pm.expect(resp_data.name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test(\"Age in req eql with age in resp\", function () {\r",
									"    pm.expect(req_data.age).to.eql(resp_data.age);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "age",
									"value": "26",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Suleyman",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"resp_data = pm.response.json();\r",
									"\r",
									"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
									"object = resp_data[_.random(resp_data.length)]\r",
									"\r",
									"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"pm.environment.set(\"Cur_ID\", object.Cur_ID);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var listVal = [];\r",
									"\r",
									"for (let i = 0; i<resp_data.length; i++) {\r",
									"// for (let i = 0; i<10; i++) {\r",
									"    listVal.push(resp_data[i].Cur_Abbreviation);\r",
									"    pm.sendRequest({\r",
									"  url: 'http://54.157.99.22:80/curr_byn',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'urlencoded',\r",
									"    urlencoded: [{ key: 'auth_token', value: pm.environment.get('token')},\r",
									"    { key: 'curr_code', value: [i]}]\r",
									"  }\r",
									"}, (error, response) => {\r",
									"        // resp_data2 = response.json();\r",
									"        if (response.code == 500){\r",
									"            // pass();\r",
									"            console.log(\"500 error occurred\")\r",
									"        }\r",
									"        else if(response.code == 200){\r",
									"            if (Object.hasOwn(response.json(), 'Cur_Abbreviation')){\r",
									"    //             const result = {\r",
									"    //     \"Cur_Abbreviation\": resp_data2.Cur_Abbreviation,\r",
									"    //     \"Cur_ID\": resp_data2.Cur_ID,\r",
									"    //     \"Cur_Name\": resp_data2.Cur_Name,\r",
									"    //     \"Cur_OfficialRate\": resp_data2.Cur_OfficialRate,\r",
									"    //     \"Cur_Scale\": resp_data2.Cur_Scale,\r",
									"    //     \"Date\": resp_data2.Date\r",
									"    // }\r",
									"                // console.log(result);\r",
									"                console.log(response.json());\r",
									"            }\r",
									"            else{\r",
									"                console.log(\"There is no Cur_Abbreviation key in json\")\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"console.log(\"List of Cur_Abbreviation \" + listVal) // List of Cur_Abbreviation USD,CAD,EUR,AED,AFN,ALL,AMD,ARS,AUD,AZN,BAM,BDT,BGN,BHD,BIF,BND,BOB,BRL,BWP,BYN,BZD,CDF,CHF,CLP,CNY,COP,CRC,CVE,CZK,DJF,DKK,DOP,DZD,EEK,EGP,ERN,ETB,GBP,GEL,GHS,GNF,GTQ,HKD,HNL,HRK,HUF,IDR,ILS,INR,IQD,IRR,ISK,JMD,JOD,JPY,KES,KHR,KMF,KRW,KWD,KZT,LBP,LKR,LTL,LVL,LYD,MAD,MDL,MGA,MKD,MMK,MOP,MUR,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SDG,SEK,SGD,SOS,SYP,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,UYU,UZS,VEF,VND,XAF,XOF,YER,ZAR,ZMK,ZWL"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "/curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"req_data = request.data;\r",
									"resp_data = pm.response.json();\r",
									"\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "age",
									"value": "26",
									"type": "text",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Suleyman",
									"type": "text",
									"disabled": true
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}