{
	"info": {
		"_postman_id": "5b013226-2f3a-4a6b-88cb-555e6f4846b7",
		"name": "2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14673334"
	},
	"item": [
		{
			"name": "EX_2",
			"item": [
				{
					"name": "/first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"first\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var resp_data = pm.response.json();\r",
									"console.log(resp_data)\r",
									"\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Name in request same with name in response\", function () {\r",
									"    pm.expect(resp_data.name).to.eql('Suleyman');\r",
									"});\r",
									"\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Age in request same with age in response\", function () {\r",
									"    pm.expect(resp_data.age).to.eql('26');\r",
									"});\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Salary in request same with salary in response\", function () {\r",
									"    pm.expect(resp_data.salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var req_data = request.data;\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name in request same with name in response (via variable)\", function () {\r",
									"    pm.expect(req_data.name).to.eql(resp_data.name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age in request same with age in response (via variable)\", function () {\r",
									"    pm.expect(req_data.age).to.eql(resp_data.age);\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Salary in request same with salary in response (via variable)\", function (){\r",
									"    pm.expect(+req_data.salary).to.eql(resp_data.salary);\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response.\r",
									"console.log(\"Family = \", resp_data.family);\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"// console.log(resp_data.family.u_salary_1_5_year)\r",
									"pm.test(\"u_salary_1_5_year in request eql with salary*4 in response (via variable)\", function () {\r",
									"    pm.expect((+req_data.salary)*4).to.eql(resp_data.family.u_salary_1_5_year);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Suleyman",
									"type": "text"
								},
								{
									"key": "age",
									"value": "26",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"pm.sendRequest(pm.variables.get('url')+\"/object_info_3?name=anvirus&age=26&salary=1000\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									"\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var resp_data = pm.response.json();\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var req_data = pm.request.url.query.all();\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name in request same with name in response (via variable)\", function () {\r",
									"    pm.expect(req_data[0].value).to.eql(resp_data.name);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age in request same with age in response (via variable)\", function () {\r",
									"    pm.expect(req_data[1].value).to.eql(resp_data.age);\r",
									"});\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Salary in request same with salary in response (via variable)\", function () {\r",
									"    pm.expect(+req_data[2].value).to.eql(resp_data.salary);\r",
									"});\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(resp_data.family)\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Param 'dog' has 'name' param\", function () {\r",
									"    pm.expect(resp_data.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Param 'dog' has 'age' param\", function () {\r",
									"    pm.expect(resp_data.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Dog name is Luky\", function () {\r",
									"    pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Dog age is 4\", function () {\r",
									"    pm.expect(resp_data.family.pets.dog.age).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=anvirus&age=26&salary=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "anvirus"
								},
								{
									"key": "age",
									"value": "26"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"resp_data = pm.response.json();\r",
									"\r",
									"// 4. Спарсить request.\r",
									"req_data = pm.request.url.query.toObject();\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(req_data.name).to.eql(resp_data.name);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(+req_data.age).to.eql(resp_data.age);\r",
									"});\r",
									"\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"console.log(\"Request salary = \", +req_data.salary)\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(\"Response salary = \", resp_data.salary)\r",
									"\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(\"Response salary [0] = \", resp_data.salary[0])\r",
									"\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(\"Response salary [1] = \", resp_data.salary[1])\r",
									"\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"\r",
									"console.log(\"Response salary [2] = \", resp_data.salary[2])\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"0 element req_salary eql resp_salary\", function () {\r",
									"    pm.expect(+req_data.salary).to.eql(resp_data.salary[0]);\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"1 element req_salary*2 eql resp_salary\", function () {\r",
									"    pm.expect((+req_data.salary)*2).to.eql(+resp_data.salary[1]);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"2 element req_salary*3 eql resp_salary\", function () {\r",
									"    pm.expect((+req_data.salary)*3).to.eql(+resp_data.salary[2]);\r",
									"});\r",
									"\r",
									"// 15. Создать в окружении переменную name\r",
									"pm.environment.set(\"name\");\r",
									"\r",
									"// 16. Создать в окружении переменную age\r",
									"pm.environment.set(\"age\");\r",
									"\r",
									"// 17. Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary\");\r",
									"\r",
									"// 18. Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", resp_data.name);\r",
									"\r",
									"// 19. Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", resp_data.age);\r",
									"\r",
									"// 20. Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", resp_data.salary);\r",
									"\r",
									"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"for (i of resp_data.salary) {\r",
									"    console.log(i)\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=anvirus&age=26&salary=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "anvirus"
								},
								{
									"key": "age",
									"value": "26"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Вставить параметр salary из окружения в request\r",
									"salary_local = pm.environment.get(\"salary\");\r",
									"\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"age_local = pm.environment.get(\"age\");\r",
									"\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"name_local = pm.environment.get(\"name\");\r",
									"\r",
									"// 4. Отправить запрос.\r",
									"pm.test(\"Request sent\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 6. Спарсить response body в json.\r",
									"resp_data = pm.response.json();\r",
									"\r",
									"// 7. Спарсить request.\r",
									"req_data = request.data;\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"start_qa_salary\", function () {\r",
									"    pm.expect(resp_data).to.have.property('start_qa_salary');\r",
									"});\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp_data).to.have.property('qa_salary_after_6_months');\r",
									"});\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"qa_salary_after_12_months\", function () {\r",
									"    pm.expect(resp_data).to.have.property('qa_salary_after_12_months');\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(resp_data).to.have.property('qa_salary_after_1.5_year');\r",
									"});\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(resp_data).to.have.property('qa_salary_after_3.5_years');\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"person\", function () {\r",
									"    pm.expect(resp_data).to.have.property('person');\r",
									"});\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Param start_qa_salary is eql salary from request\", function () {\r",
									"    pm.expect(+req_data.salary).to.eql(resp_data.start_qa_salary);\r",
									"});\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Param qa_salary_after_6_months is eql salary*2 from request\", function () {\r",
									"    pm.expect(+req_data.salary*2).to.eql(resp_data.qa_salary_after_6_months);\r",
									"});\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"Param qa_salary_after_12_months is eql salary*2.7 from request\", function () {\r",
									"    pm.expect(+req_data.salary*2.7).to.eql(resp_data.qa_salary_after_12_months);\r",
									"});\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"Param qa_salary_after_1.5_year is eql salary*3.3 from request\", function () {\r",
									"    pm.expect(+req_data.salary*3.3).to.eql(resp_data[\"qa_salary_after_1.5_year\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Resp_salary_after_1.5_years\", function () { \r",
									"    pm.expect(resp_salary_after_1_5_years).to.eql(req.salary*3.3);\r",
									"});\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"Param qa_salary_after_3.5_years is eql salary*3.8 from request\", function () {\r",
									"    pm.expect(+req_data.salary*3.8).to.eql(resp_data[\"qa_salary_after_3.5_years\"]);\r",
									"});\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
									"    pm.expect(+req_data.salary).to.eql(resp_data.person.u_name[1]);\r",
									"});\r",
									"\r",
									"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Параметр u_age равен age из request\", function () {\r",
									"    pm.expect(+req_data.age).to.eql(resp_data.person.u_age);\r",
									"});\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
									"    pm.expect(+req_data.salary*4.2).to.eql(resp_data.person.u_salary_5_years);\r",
									"});\r",
									"\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"for (i in resp_data.person) {\r",
									"    console.log(i)\r",
									"};\r",
									"console.log(resp_data.person.u_name)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test",
									"type": "text"
								},
								{
									"key": "age",
									"value": "26",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}